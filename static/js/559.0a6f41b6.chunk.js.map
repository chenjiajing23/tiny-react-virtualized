{"version":3,"sources":["webpack://tiny-react-virtualized/./src/modules/demo/pages/Demo-1.tsx"],"names":["Demo1","contentRef","useRef","startIndex","setStartIndex","useState","endIndex","setEndIndex","screenHeight","setScreenHeight","itemSize","listData","setListData","startOffset","setStartOffset","listHeight","useMemo","length","visibleData","slice","Math","min","visibleCount","ceil","useEffect","Array","fill","map","_","i","id","value","dom","current","setTimeout","clientHeight","onScroll","useCallback","container","scrollTop","start","floor","end","ref","className","style","height","transform","item","lineHeight","textAlign","memo"],"mappings":";yLAIA,MAAMA,EAAQ,KACZ,MAAMC,GAAaC,YAAuB,OACnCC,EAAYC,IAAiBC,cAAS,IACtCC,EAAUC,IAAeF,cAAS,IAClCG,EAAcC,IAAmBJ,cAAS,IAC1CK,IAAYL,cAAS,KACrBM,EAAUC,IAAeP,cAAgB,KACzCQ,EAAaC,IAAkBT,cAAS,GAMzCU,GAAaC,cAAQ,IAAML,EAASM,OAASP,GAAU,CAACA,EAAUC,EAASM,SAG3EC,GAAcF,cAClB,IAAML,EAASQ,MAAMhB,EAAYiB,KAAKC,IAAIf,EAAUK,EAASM,UAC7D,CAACX,EAAUK,EAAUR,IAIjBmB,GAAeN,cAAQ,IAAMI,KAAKG,KAAKf,EAAeE,IAAW,CAACA,EAAUF,KAElFgB,gBAAU,KAERZ,EACEa,MAAM,KACHC,KAAK,GACLC,KAAI,CAACC,EAAGC,KAAJ,CAAaC,GAAID,EAAGE,MAAQ,IAAGF,EAAI,cAG5C,MAAMG,EAAM/B,EAAWgC,QAEnBD,GACFE,YAAW,KACTzB,EAAgBuB,EAAIG,cACpB/B,EAAc,GACdG,EAAY,EAAIa,KAAKG,KAAKS,EAAIG,aAAezB,MAC5C,KAEJ,CAACA,IAEJ,MAAM0B,GAAWC,kBAAY,KAC3B,MAAMC,EAAYrC,EAAWgC,QAC7B,GAAIK,EAAW,CAEb,MAAMC,EAAYD,EAAUC,UAEtBC,EAAQpB,KAAKqB,MAAMF,EAAY7B,GAC/BgC,EAAMF,EAAQlB,EACpBlB,EAAcoC,GACdjC,EAAYmC,GAEZ5B,EAAeyB,EAAaA,EAAY7B,MAEzC,CAACA,EAAUY,IAEd,OACE,uBAAKqB,IAAK1C,EAAY2C,UAAU,0BAA0BR,SAAUA,IAElE,cAAKQ,UAAU,wBAAwBC,MAAO,CAAEC,OAAS,GAAE/B,UAG3D,cAAK6B,UAAU,gBAAgBC,MAAO,CAAEE,UAAY,kBAAiBlC,iBAArE,EACGK,EAAYS,KAAIqB,IACf,cAEEJ,UAAU,qBACVC,MAAO,CAAEC,OAAS,GAAEpC,MAAcuC,WAAa,GAAEvC,MAAcwC,UAAW,WAFrEF,EAAKlB,GAITkB,EAAKjB,YAQlB,GAAeoB,UAAKnD","file":"static/js/559.0a6f41b6.chunk.js","sourcesContent":["import React, { memo, useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport '../style/demo.less';\n\nconst Demo1 = () => {\n  const contentRef = useRef<HTMLDivElement>(null);\n  const [startIndex, setStartIndex] = useState(0); //  开始索引\n  const [endIndex, setEndIndex] = useState(0); // 结束索引\n  const [screenHeight, setScreenHeight] = useState(0); // 可视区域高度\n  const [itemSize] = useState(60); // 每项高度\n  const [listData, setListData] = useState<any[]>([]); // 所有列表数组\n  const [startOffset, setStartOffset] = useState(0); // 偏移量\n\n  /**\n   * @desc 计算属性\n   */\n  // 总高度\n  const listHeight = useMemo(() => listData.length * itemSize, [itemSize, listData.length]);\n\n  // 真实显示的列表数据\n  const visibleData = useMemo(\n    () => listData.slice(startIndex, Math.min(endIndex, listData.length)),\n    [endIndex, listData, startIndex]\n  );\n\n  // 可显示的列表项数\n  const visibleCount = useMemo(() => Math.ceil(screenHeight / itemSize), [itemSize, screenHeight]);\n\n  useEffect(() => {\n    // 初始化假数据\n    setListData(\n      Array(20000)\n        .fill(0)\n        .map((_, i) => ({ id: i, value: `第${i + 1}条数据内容` }))\n    );\n\n    const dom = contentRef.current;\n\n    if (dom) {\n      setTimeout(() => {\n        setScreenHeight(dom.clientHeight);\n        setStartIndex(0);\n        setEndIndex(0 + Math.ceil(dom.clientHeight / itemSize));\n      }, 0);\n    }\n  }, [itemSize]);\n\n  const onScroll = useCallback(() => {\n    const container = contentRef.current;\n    if (container) {\n      // 当前滚动位置\n      const scrollTop = container.scrollTop;\n      // 开始索引\n      const start = Math.floor(scrollTop / itemSize);\n      const end = start + visibleCount;\n      setStartIndex(start);\n      setEndIndex(end);\n      // 更新偏移量\n      setStartOffset(scrollTop - (scrollTop % itemSize));\n    }\n  }, [itemSize, visibleCount]);\n\n  return (\n    <div ref={contentRef} className=\"infinite-list-container\" onScroll={onScroll}>\n      {/* 容器的占位div，高度为总列表高度，用于生成滚动条 */}\n      <div className=\"infinite-list-phantom\" style={{ height: `${listHeight}px` }} />\n      {/* 可视列表，实际渲染列表  */}\n\n      <div className=\"infinite-list\" style={{ transform: `translate3d(0, ${startOffset}px, 0)` }}>\n        {visibleData.map(item => (\n          <div\n            key={item.id}\n            className=\"infinite-list-item\"\n            style={{ height: `${itemSize}px`, lineHeight: `${itemSize}px`, textAlign: 'center' }}\n          >\n            {item.value}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Demo1);\n\n// https://ufresh2013.github.io/2020/04/26/%E8%99%9A%E6%8B%9F%E5%88%97%E8%A1%A8/\n"],"sourceRoot":""}